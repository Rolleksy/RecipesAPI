@page "/recipes"
@using System.Text.Json;
@using System.Text;
@inject HttpClient client
<h3>Recipes</h3>

<SfDropDownList TValue="string" TItem="RecipeModel" Placeholder="Select recipe" DataSource="@recipes">
    <DropDownListFieldSettings Value="recipeId" Text="recipeName"></DropDownListFieldSettings>
    <DropDownListEvents TValue="string" TItem="RecipeModel" ValueChange="OnValueChange"></DropDownListEvents>
</SfDropDownList>
<br><br>
<h1>@recipe.recipeName</h1>
<p>@recipe.category</p>
<br />
@if (ingredients == null)
{
    <p></p>
}
else
{
    <table class="tableReci">
        <thead>
            <tr>
                <th>Ingredient</th>
                <th>Quantity</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var ingredient in ingredients)
            {
                <tr>
                    <td>@ingredient.Name</td>
                    <td>@ingredient.Quantity @ingredient.QuantityType</td>
                    
                </tr>
            }
        </tbody>
    </table>
}

<div class="recipeDesc">
    <p>@recipe.description</p>
</div>


@code {
    List<RecipeModel> recipes;

    RecipeModel recipe = new();
    List<IngredientsList> ingredients;


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        recipe.recipeName = string.Empty;
        recipe.description = string.Empty;
        recipe.category = string.Empty;
    }

    private async Task LoadData()
    {
        recipes = await client.GetFromJsonAsync<List<RecipeModel>>("/Recipes");

    }

    private async Task OnValueChange(ChangeEventArgs<string, RecipeModel> args)
    {
        recipe.description = args.ItemData.description;
        recipe.category = args.ItemData.category;
        recipe.recipeName = args.ItemData.recipeName;
        ingredients = await client.GetFromJsonAsync<List<IngredientsList>>($"/Recipes/Ingredients/{args.ItemData.recipeId}");
    }
}
